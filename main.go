package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"path/filepath"
)

var head = `// Code generated by go-packfolder; DO NOT EDIT.
package %s

import (
	"encoding/json"
	"log"
	"strings"

	"github.com/sciter-sdk/go-sciter"
)
`

var folder = "\nvar unpacked map[string][]byte\n\nvar packed = `%s`\n"

var tail = `
func onLoadData(s *sciter.Sciter) func(ld *sciter.ScnLoadData) int {
	return func(ld *sciter.ScnLoadData) int {
		uri := ld.Uri()
		if strings.HasPrefix(uri, "file://") {
			if data, ok := unpacked[uri[7:]]; ok {
				s.DataReady(uri, data)
			}
		}
		return sciter.LOAD_OK
	}
}

func newHandler(s *sciter.Sciter) *sciter.CallbackHandler {
	return &sciter.CallbackHandler{
		OnLoadData: onLoadData(s),
	}
}

func handleDataLoad(s *sciter.Sciter) {
	if err := json.Unmarshal([]byte(packed), &unpacked); err != nil {
		log.Fatal(err)
	}
	s.SetCallback(newHandler(s))
}
`

func packFolder(dir string) []byte {
	infos, err := ioutil.ReadDir(dir)
	if err != nil {
		log.Fatal(err)
	}
	var files []string
	for _, info := range infos {
		files = append(files, filepath.Join(dir, info.Name()))
	}
	fmap := make(map[string][]byte)
	for _, file := range files {
		data, err := ioutil.ReadFile(file)
		if err != nil {
			log.Fatal(err)
		}
		fmap[filepath.ToSlash(file)] = data
	}
	jsn, err := json.MarshalIndent(fmap, "", "\t")
	if err != nil {
		log.Fatal(err)
	}
	return jsn
}

func main() {
	o := flag.String("o", "out.go", "")
	p := flag.String("p", "main", "")

	flag.Parse()

	if len(flag.Args()) != 1 {
		fmt.Println("Usage: go-packfolder [-o output] [-p package] <folder>")
		return
	}
	data := packFolder(flag.Arg(0))
	final := fmt.Sprintf(head, *p)
	final += fmt.Sprintf(folder, data)
	final += tail
	ioutil.WriteFile(*o, []byte(final), 0600)
}
